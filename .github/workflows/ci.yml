# DependencyInjectionExampleSolution
# /DepedencyInjectionUsingMVC
name: CI

on:
  workflow_dispatch:
  push:
    branches:
    - feature
    # paths:
    # - DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/*

# env:
#     GH_TOKEN: ${{ secrets.ARTIFACT_TOKEN }}
  
jobs:
  # Dotnet:
  #   uses: ./.github/workflows/dotnet_workflow_reuse.yml

 # ManualSonar:
 #    runs-on: Ubuntu-latest
 #    # needs: Dotnet
 #    steps:
 #      - name: Remove Previous Dotnet Version
 #        run : |
 #          cd /usr/share/dotnet/
 #          rm -rf *
 #      - name: Checkout code
 #        uses: actions/checkout@v3
 #      - name: Setup .NET Core SDK
 #        uses: actions/setup-dotnet@v3
 #        with:
 #          dotnet-version: 3.1.426
 #      - name: Listing Dotnet version
 #        run: dotnet --version
 #      - name: Change Directory
 #        run: cd DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC && ls
 #      - name: dotnet tool
 #        run: |
 #          dotnet tool install --global dotnet-sonarscanner
 #          dotnet sonarscanner begin /k:"dotnet" /d:sonar.host.url="http://20.124.81.89:9000"  /d:sonar.login="sqp_0b9c785059f2147dd7162acc66eb6157b3bb7ff2"
 #          dotnet build DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/DepedencyInjectionUsingMVC.csproj
 #          dotnet sonarscanner end /d:sonar.login="sqp_0b9c785059f2147dd7162acc66eb6157b3bb7ff2"
        
  ManualSonar:
    runs-on: Ubuntu-latest
    # needs: Dotnet
    steps:
         
    - name: Azure CLI
      run: az login --service-principal -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }} --tenant 406f6fb2-e087-4d29-9642-817873fddc4c

    # - uses: Azure/get-keyvault-secrets@v1
    #   with:
    #     keyvault: "Sharnikeyvault"
    #     secrets: 'mySecret3, mySecret4'
    #   id: myGetSecretAction
   
    - uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: "sqp_0b9c785059f2147dd7162acc66eb6157b3bb7ff2" 
        SONAR_HOST_URL: "http://20.124.81.89:9000/"
      with:
       args: >
         -Dsonar.projectKey=dotnet
    
        
  # Docker_Login:
  #   runs-on: ubuntu-latest
  #   needs: Dotnet
  #   steps:
  #     - name: Docker Login to ACR
  #       uses: docker/login-action@v3.1.0
  #       with:
  #         registry: githubcipractice.azurecr.io
  #         username: ${{ secrets.DOCKER_LOGIN }} 
  #         password: ${{ secrets.DOCKER_PASSWORD }} 
  #         ecr: false

  # Docker_Build:
  #   runs-on: ubuntu-latest
  #   # needs: Docker_Login
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker build using Dockerfile
  #       run: |
  #         cd DependencyInjectionExampleSolution
  #         docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} --file Dockerfile-backend .
  #         docker images
      # - name: Aqua Security Trivy
      #   uses: aquasecurity/trivy-action@0.18.0
      #   with:   
      #     exit-code: 0
      #     severity: MEDIUM,HIGH,CRITICAL
      #     format: table
      #     image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
          
      # - name: Azure CLI
      #   run: az login --service-principal -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }} --tenant ${{secrets.AZ_TENANT}}

      # - name: Docker build using Dockerfile
      #   run: |
      #     docker login githubcipractice.azurecr.io -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}
      #     docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
      #     docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
        
      # - uses: Azure/get-keyvault-secrets@v1
      #   with:
      #     keyvault: "Sharnikeyvault"
      #     secrets: 'docker-login, docker-pass'
      #   id: DemoSecretAction
        
      # - name: Docker build using Dockerfile
      #   run: |
      #     docker login githubcipractice.azurecr.io -u ${{ steps.DemoSecretAction.outputs.docker-login }} -p ${{ steps.DemoSecretAction.outputs.docker-pass }}
      #     docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
      #     docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}

    
      # - name: Store run ID as an artifact
      #   uses: actions/upload-artifact@v4.3.1
      #   with:
      #     name: run-id
      #     path: ${{ github.run_id }}
 
  # Docker_Build:
  #   runs-on: ubuntu-latest
  #   # needs: Dotnet
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker build using Dockerfile
  #       run: |
  #         cd DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/
  #         docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} .
  #         docker images
       # gh run download ${{ github.run_id }}
         
      # - name: Aqua Security Trivy
      #   uses: aquasecurity/trivy-action@0.18.0
      #   with:   
      #     exit-code: 0
      #     severity: MEDIUM,HIGH,CRITICAL
      #     format: table
      #     image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
          
      # - name: Azure CLI
      #   run: az login --service-principal -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }} --tenant ${{secrets.AZ_TENANT}}
        
      # - uses: Azure/get-keyvault-secrets@v1
      #   with:
      #     keyvault: "Sharnikeyvault"
      #     secrets: 'docker-login, docker-pass'
      #   id: DemoSecretAction
        
      # - name: Docker build using Dockerfile
      #   run: |
      #     docker login githubcipractice.azurecr.io -u ${{ steps.DemoSecretAction.outputs.docker-login }} -p ${{ steps.DemoSecretAction.outputs.docker-pass }}
      #     docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
      #     docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}

