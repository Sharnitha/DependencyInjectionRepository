# DependencyInjectionExampleSolution
# /DepedencyInjectionUsingMVC
name: CI

on:
  push:
    branches:
    - master
  workflow_dispatch:

env:
    GH_TOKEN: ${{ secrets.ARTIFACT_TOKEN }}
  
jobs:
  # Dotnet:
  #   uses: ./.github/workflows/dotnet_workflow_reuse.yml

  build:
    name: Build
    runs-on: windows-latest
    # needs: Dotnet
    steps:
      - name: checkout direct/files
        uses: actions/checkout@v4
      # - name: Remove Previous Dotnet Version
      #   run : |
      #     cd /usr/share/dotnet/
      #     rm -rf *
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 3.1.426
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
     
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"dotnet" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build .\DependencyInjectionExampleSolution\DepedencyInjectionUsingMVC
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
        
  Docker_Login:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Docker Login to ACR
        uses: docker/login-action@v3.1.0
        with:
          registry: githubcipractice.azurecr.io
          username: ${{ secrets.DOCKER_LOGIN }} 
          password: ${{ secrets.DOCKER_PASSWORD }} 
          ecr: false
 
  Docker_Build:
    runs-on: ubuntu-latest
    needs: Docker_Login
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Docker build using Dockerfile
        run: |
          cd DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/
          gh run download ${{ github.run_id }}
          docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} .
      - name: Aqua Security Trivy
        uses: aquasecurity/trivy-action@0.18.0
        with:   
          exit-code: 0
          severity: MEDIUM,HIGH,CRITICAL
          format: table
          image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
      - name: Docker build using Dockerfile
        run: |
          docker login githubcipractice.azurecr.io -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
          docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}

