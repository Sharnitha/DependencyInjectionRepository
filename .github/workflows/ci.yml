# DependencyInjectionExampleSolution
# /DepedencyInjectionUsingMVC
name: CI

on:
  workflow_dispatch:
  push:
    branches:
    - feature
    # paths:
    # - DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/*

# env:
#     GH_TOKEN: ${{ secrets.ARTIFACT_TOKEN }}
  
jobs:
  # Dotnet:
  #   uses: ./.github/workflows/dotnet_workflow_reuse.yml

  Sonar:

    name: Sonarqub
    runs-on: windows-latest
    steps:
      - uses: ./.github/workflows/dotnet_workflow_reuse.yml
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache SonarQube packages
        uses: actions/cache@v1
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarQube scanner
        id: cache-sonar-scanner
        uses: actions/cache@v1
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarQube scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          New-Item -Path .\.sonar\scanner -ItemType Directory
          dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /k:"dotnet" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="${{ secrets.SONAR_HOST_URL }}"
          dotnet build
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

  # ManualSonar:
  #   runs-on: Ubuntu-latest
  #   needs: Dotnet
  #   steps:
         
    # - name: Azure CLI
    #   run: az login --service-principal -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }} --tenant 406f6fb2-e087-4d29-9642-817873fddc4c

    # - uses: Azure/get-keyvault-secrets@v1
    #   with:
    #     keyvault: "Sharnikeyvault"
    #     secrets: 'mySecret3, mySecret4'
    #   id: myGetSecretAction
   
    # - uses: sonarsource/sonarqube-scan-action@master
    #   env:
    #     SONAR_TOKEN: "squ_33fc07c997a708b5beae2d6d3201ae4fa6a45e97" 
    #     SONAR_HOST_URL: "http://20.115.87.78:9090/"
    #     # SONAR_TOKEN: ${{ steps.myGetSecretAction.outputs.mySecret3 }}
    #     # SONAR_HOST_URL:  ${{ steps.myGetSecretAction.outputs.mySecret4 }}
    #   with:
    #    args: >
    #      -Dsonar.projectKey=dotnet
    
        
  # Docker_Login:
  #   runs-on: ubuntu-latest
  #   needs: Dotnet
  #   steps:
  #     - name: Docker Login to ACR
  #       uses: docker/login-action@v3.1.0
  #       with:
  #         registry: githubcipractice.azurecr.io
  #         username: ${{ secrets.DOCKER_LOGIN }} 
  #         password: ${{ secrets.DOCKER_PASSWORD }} 
  #         ecr: false

  # Docker_Build:
  #   runs-on: ubuntu-latest
  #   # needs: Docker_Login
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker build using Dockerfile
  #       run: |
  #         cd DependencyInjectionExampleSolution
  #         docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} --file Dockerfile-backend .
  #         docker images
      # - name: Aqua Security Trivy
      #   uses: aquasecurity/trivy-action@0.18.0
      #   with:   
      #     exit-code: 0
      #     severity: MEDIUM,HIGH,CRITICAL
      #     format: table
      #     image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
          
      # - name: Azure CLI
      #   run: az login --service-principal -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }} --tenant ${{secrets.AZ_TENANT}}

      # - name: Docker build using Dockerfile
      #   run: |
      #     docker login githubcipractice.azurecr.io -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }}
      #     docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
      #     docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
        
      # - uses: Azure/get-keyvault-secrets@v1
      #   with:
      #     keyvault: "Sharnikeyvault"
      #     secrets: 'docker-login, docker-pass'
      #   id: DemoSecretAction
        
      # - name: Docker build using Dockerfile
      #   run: |
      #     docker login githubcipractice.azurecr.io -u ${{ steps.DemoSecretAction.outputs.docker-login }} -p ${{ steps.DemoSecretAction.outputs.docker-pass }}
      #     docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
      #     docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}

    
      # - name: Store run ID as an artifact
      #   uses: actions/upload-artifact@v4.3.1
      #   with:
      #     name: run-id
      #     path: ${{ github.run_id }}
 
  # Docker_Build:
  #   runs-on: ubuntu-latest
  #   # needs: Dotnet
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Docker build using Dockerfile
  #       run: |
  #         cd DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/
  #         docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} .
  #         docker images
       # gh run download ${{ github.run_id }}
         
      # - name: Aqua Security Trivy
      #   uses: aquasecurity/trivy-action@0.18.0
      #   with:   
      #     exit-code: 0
      #     severity: MEDIUM,HIGH,CRITICAL
      #     format: table
      #     image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
          
      # - name: Azure CLI
      #   run: az login --service-principal -u ${{ secrets.DOCKER_LOGIN }} -p ${{ secrets.DOCKER_PASSWORD }} --tenant ${{secrets.AZ_TENANT}}
        
      # - uses: Azure/get-keyvault-secrets@v1
      #   with:
      #     keyvault: "Sharnikeyvault"
      #     secrets: 'docker-login, docker-pass'
      #   id: DemoSecretAction
        
      # - name: Docker build using Dockerfile
      #   run: |
      #     docker login githubcipractice.azurecr.io -u ${{ steps.DemoSecretAction.outputs.docker-login }} -p ${{ steps.DemoSecretAction.outputs.docker-pass }}
      #     docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }}  
      #     docker history githubcipractice.azurecr.io/demoenv:${{ github.run_id }}

