# DependencyInjectionExampleSolution
# /DepedencyInjectionUsingMVC
name: CI

on:
  push:
    branches:
    - master
  workflow_dispatch:

env:
    GH_TOKEN: ${{ secrets.ARTIFACT_TOKEN }}
  
jobs:
  jobs_workflow:
    uses: ./.github/workflows/dotnet_workflow_reuse.yml
        

  Docker_Build:
    runs-on: ubuntu-latest
    needs: jobs_workflow
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Docker build using Dockerfile
        run: |
          cd DependencyInjectionExampleSolution/DepedencyInjectionUsingMVC/
          gh run download ${{ github.run_id }}
          docker build -t githubcipractice.azurecr.io/demoenv:${{ github.run_id }} .
      - name: Docker_Login
        run: docker login --username '${{secrets.DOCKER_LOGIN}}' --password '${{secrets.DOCKER_PASSWORD}}'
      - name: Docker_Push
        run: docker push githubcipractice.azurecr.io/demoenv:${{ github.run_id }} 
 

  Aqua_Trivy:
    runs-on: ubuntu-latest
    needs: Docker_Build
    steps:
      - name: PUll image from ACR
        run: docker pull githubcipractice.azurecr.io/demoenv:${{ github.run_id }} 
      - name: Aqua Security Trivy
        uses: aquasecurity/trivy-action@0.18.0
        with:   
          exit-code: 0
          severity: MEDIUM,HIGH,CRITICAL
          format: table
          image-ref: githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
          
  # Aqua_Trivy_report:
  #   runs-on: ubuntu-latest
  #   needs: Aqua_Trivy
  #   steps:
  #     - name: Aqua Trivy scan report
  #       run: |
  #         touch trivyresults.txt
  #         # trivy image -f json -o trivyfijs.json githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
  #         trivy image -f table -o trivyresults.txt githubcipractice.azurecr.io/demoenv:${{ github.run_id }}
